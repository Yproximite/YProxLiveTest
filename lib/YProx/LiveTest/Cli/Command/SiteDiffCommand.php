<?php

namespace YProx\LiveTest\Cli\Command;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

use YProx\LiveTest\SiteParser;

class SiteDiffCommand extends Command
{
    protected function configure()
    {
        $this->addArgument('sitelinkfile', InputArgument::REQUIRED, 'List of links to compare as generated by generateSiteLinkFile');
        $this->addArgument('outdir', InputArgument::REQUIRED);
        $this->addArgument('baseUrl1', InputArgument::REQUIRED);
        $this->addArgument('baseUrl2', InputArgument::REQUIRED);
        $this->setName('test:site-diff');
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $linkFile = $input->getArgument('sitelinkfile');
        $outdir = $input->getArgument('outdir');
        $baseUrl1 = $input->getArgument('baseUrl1');
        $baseUrl2 = $input->getArgument('baseUrl2');
        $this->output = $output;

        if (!file_exists($linkFile)) {
            $output->writeln('<error>Link file "'.$linkFile.'" does not exist</error>');
            exit(1);
        }

        if (!file_exists($outdir)) {
            $output->writeln('<error>Output directory "'.$outdir.'" does not exist</error>');
            exit(1);
        }

        $dirname = $outdir.'/'.time();

        if (!file_exists($dirname)) {
            mkdir($dirname);
        }
        $fh = fopen($linkFile, 'r');

        while ($line = fgets($fh)) {
            $version1 = $this->renderUrl($baseUrl1, $line);
            $version2 = $this->renderUrl($baseUrl2, $line);
            $diff = $this->getDiff($version1, $version2);
            if ($diff) {
                $linefname = preg_replace('&[^A-Za-z0-9]&', '_', $line);
                $fname = $dirname.'/'.urlencode($linefname);
                $this->output->writeln('<comment>Diff found</comment>:'. $fname);
                $h =fopen($fname, 'w');
                fwrite($h, $diff);
                fclose($h);
            } else {
            }
        }
    }

    protected function renderUrl($baseUrl, $url)
    {
        $command = 'lynx -dump '.$baseUrl.'/'.$url;
        $this->output->write('<info>Rendering page:</info> '.$command);
        exec($command, $outlines);
        $res = implode("\n", $outlines);

        $res = str_replace($baseUrl, '', $res);

        return $res;
    }

    protected function getDiff($version1, $version2)
    {
        $v1name = tempnam(sys_get_temp_dir(), 'site-test-diff');

        $h = fopen($v1name, 'w');
        fwrite($h, $version1);
        fclose($h);
        $v2name = tempnam(sys_get_temp_dir(), 'site-test-diff');
        $h = fopen($v2name, 'w');
        fwrite($h, $version2);
        fclose($h);

        exec('diff '.$v1name.' '.$v2name, $output);
        unlink($v1name);
        unlink($v2name);

        $res = implode("\n", $output);
        return trim($res);
    }
}
